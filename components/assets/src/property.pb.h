/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6 */

#ifndef PB_PB_PROPERTY_PROPERTY_PB_H_INCLUDED
#define PB_PB_PROPERTY_PROPERTY_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _PB_Property_GetRequest { 
    char *key;
} PB_Property_GetRequest;

typedef struct _PB_Property_GetResponse { 
    char *key;
    char *value;
} PB_Property_GetResponse;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define PB_Property_GetRequest_init_default      {NULL}
#define PB_Property_GetResponse_init_default     {NULL, NULL}
#define PB_Property_GetRequest_init_zero         {NULL}
#define PB_Property_GetResponse_init_zero        {NULL, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define PB_Property_GetRequest_key_tag           1
#define PB_Property_GetResponse_key_tag          1
#define PB_Property_GetResponse_value_tag        2

/* Struct field encoding specification for nanopb */
#define PB_Property_GetRequest_FIELDLIST(X, a) \
X(a, POINTER,  SINGULAR, STRING,   key,               1)
#define PB_Property_GetRequest_CALLBACK NULL
#define PB_Property_GetRequest_DEFAULT NULL

#define PB_Property_GetResponse_FIELDLIST(X, a) \
X(a, POINTER,  SINGULAR, STRING,   key,               1) \
X(a, POINTER,  SINGULAR, STRING,   value,             2)
#define PB_Property_GetResponse_CALLBACK NULL
#define PB_Property_GetResponse_DEFAULT NULL

extern const pb_msgdesc_t PB_Property_GetRequest_msg;
extern const pb_msgdesc_t PB_Property_GetResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define PB_Property_GetRequest_fields &PB_Property_GetRequest_msg
#define PB_Property_GetResponse_fields &PB_Property_GetResponse_msg

/* Maximum encoded size of messages (where known) */
/* PB_Property_GetRequest_size depends on runtime parameters */
/* PB_Property_GetResponse_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
